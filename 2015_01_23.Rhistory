round(pnorm(0.51,0.5,sqrt(1/12/10), lower.tail=FALSE), 3)
pnorm(.51, .5, sqrt(1/12/100),lower.tail=F)
round(pnorm(0.51,0.5,sqrt(1/12/100), lower.tail=FALSE), 3)
1/2*sqrt(10)
1/(2*sqrt(10))
1/sqrt(10)
2*sqrt(10)
.5*(1-0.5)
0.25^2/10
mean(1:6)
mean((1:6 - 3.5)^2)
mean((1:6 - 3.5)^2)/sqrt(10)
ppois(20, 16.5*2)
?ppois
ppois(20, 16.5*2, lower.tail=FALSE)
ppois(20, 16.5*2, lower.tail=T)
pnorm(0.95, 1100, 75)
pnorm(0.95, 1100, 75/sqrt(100))
pnorm(0.95, 1100, 75/sqrt(100), lower.tail=F)
pnorm(0.95, 1100, 75/sqrt(100), lower.tail=T)
pnorm(0.975, 1100, 75/sqrt(100), lower.tail=F)
pnorm(0.90, 1100, 75/sqrt(100), lower.tail=F)
pnorm(0.90, 1100, 75/sqrt(100), lower.tail=T)
?rnorm
qnorm(1112, 1100, 75/10)
qnorm(1112, 1100, sqrt(75/10)
)
qnorm(1112, 1100, 75/100)
1100 + 1.645*75/10
qnorm(1112, 1100, 1.645*75/10)
4/5
qnorm(0.80, 3.5, 2*sqrt(5))
qnorm(0.80, 3.5, 1.71/sqrt(5)
)
qnorm(0.20, 3.5, 1.71/sqrt(5))
?qbinom
pnorm(0.20, 3.5, 1.71/sqrt(5))
pbinom(0.20, 3.5, 1.71/sqrt(5))
qbinom(0.20, 3.5, 1.71/sqrt(5))
pbinom(0.80, 3.5, 1.71/sqrt(5))
pbinom(0.80, 3.5, 0.5
)
pbinom(0.80, 5, 0.5)
pbinom(0.20, 5, 0.5)
pbinom(0.80, 5, 0.5)
pbinom(0.95, 5, 0.5)
pbinom(1, 5, 0.5)
pbinom(2/5, 5, 0.5)
pbinom(4/5, 5, 0.5)
(0.8 - 0.5)/(sqrt(0.5*(1-0.5)/5))
(0.8 - 0.5)/(sqrt((0.5*(1-0.5))/5))
(0.2 - 0.5)/(sqrt((0.5*(1-0.5))/5))
(0.8 - 0.5)/(sqrt((0.5*(1-0.5))/5))
2*sqrt(5)*(0.8-0.5)
2*sqrt(5)*((4/5*0.5)-0.5)
2*sqrt(5)*(0.2-0.5)
2*sqrt(5)*(mean(4:5)-0.5)
2*sqrt(5)*(mean(1:3)-0.5)
2*sqrt(5)*(mean(1:6)-0.5)
2*sqrt(10)*(mean(1:6)-0.5)
binom.test(0.8,5)
pnorm(0.8, 0.5, 2.92)
pnorm(0.8, 3.5, 2.92)
pnorm(0.8, .5, 2.92)
pnorm(0.8, .5, 2*sqrt(5))
pnorm(0.8, .5, sqrt(10))
pnorm(0.8, .5, 1/sqrt(10))
pnorm(0.2, .5, 1/sqrt(10))
pnorm(0.2, .5, 2*sqrt(5), lower.tail=F)
pnorm(0.2, .5, sqrt(5), lower.tail=F)
pnorm(0.2, .5, sqrt(10), lower.tail=F)
pnorm(0.2, .5, 10, lower.tail=F)
pnorm(0.2, .5, 2, lower.tail=F)
pnorm(0.2, .5, 1/sqrt(5), lower.tail=F)
pnorm(0.8, .5, 1/sqrt(5), lower.tail=F)
pnorm(0.8, .5, 2/sqrt(5), lower.tail=F)
pnorm(0.8, .5, 2*sqrt(5), lower.tail=F)
?qnorm
qnorm(14,15,10)
qnorm(14,15,1)
qnorm(14,mean=15,sd=10/sqrt(100))
qnorm(14,mean=15,sd=10/sqrt(100), lower.tail=F)
qnorm(14,mean=15,sd=1/sqrt(100), lower.tail=F)
qnorm(1112, 1100, sqrt(75/10))
qnorm(1112, 1100, sqrt(75)/10))
qnorm(0.93,100,10)*10/10
qnorm(0.14,0.15,.10)
qnorm(14,15,10)
qnorm(14/15,15,10)
qnorm(14/15,15,10/sqrt(100))
qnorm(14/15,15,1)
qnorm(14,15,1)
1.645*10/sqrt(100)
1.645*10/sqrt(100)-15
sqrt(100)/10
qnorm(1,15,1)
qnorm(.1,15,1)
binom.test(14,100)
binom.test(15,100)
pnorm(0.68, 15, 1)
pnorm(0.68, .15, 1)
mean(rnorm(100, 15, 1))
15 + c(-1,1)*qnorm(.68,15,1)
15 + c(-1,1)*qnorm(.68)
15 + c(-1,1)*qnorm(.475)
15 + c(-1,1)*qnorm(.34)
15 + c(-1,1)*qnorm(.95)
15 + c(-1,1)*qnorm(.90)
15 + c(-1,1)*qnorm(.76)
15 + c(-1,1)*qnorm(.68)
15 + c(-1,1)*qnorm(.34)
15 + c(-1,1)*qnorm(.76)
15 + c(-1,1)*qnorm(.68)
15 + c(-1,1)*qnorm(.47.5)
15 + c(-1,1)*qnorm(.475)
library(UsingR)
library(datasets)
str(mtcars)
qt(0.95, 31)
mean(mtcars$mpg)
mean(mtcars$mpg) + 1.7
mean(mtcars$mpg) - 1.7
qt(0.95, 8)
qt(0.975, 8)
?pt
pt(0.975, 8)
pt(0.95, 8)
?t.test
t.test(mtcars$mpg[mtcars$cyl==4]-mtcars$mpg[mtcars$cyl==6],var.equal=TRUE,conf.level=0.95)
t.test(mtcars$mpg[mtcars$cyl==4]-mtcars$mpg[mtcars$cyl==6],var.equal=FALSE,conf.level=0.95)
t.test(mtcars$mpg[mtcars$cyl==4]-mtcars$mpg[mtcars$cyl==6],var.equal=TRUE,conf.level=0.975)
t.test(mtcars$mpg[mtcars$cyl==4]-mtcars$mpg[mtcars$cyl==6],var.equal=TRUE,conf.level=0.95)
t.test(mtcars$mpg[mtcars$cyl==4],mtcars$mpg[mtcars$cyl==6],var.equal=TRUE,conf.level=0.95)
t.test(mtcars$mpg[mtcars$cyl==4],mtcars$mpg[mtcars$cyl==6],var.equal=FALSE,conf.level=0.95)
t.test(mtcars$mpg[mtcars$cyl==4],mtcars$mpg[mtcars$cyl==6],var.equal=TRUE,conf.level=0.95)
n <- 9
sp <- sqrt(((9-1) * 1.5^2 + (9-1) * 1.8^2)/(9+9-2))
sp
?semd
semd <- sp*sqrt(1/9+1/9)
3 + c(-1,1) * qt(0.975, 9+9 -2) * semd
semd
sp <- sqrt(( 8 * 1.5^2 + 8 * 1.8^2)/ 16)
sp
sp <- sqrt(( 8 * 1.5 + 8 * 1.8)/ 16)
sp
(1.5+1.8)/2
n1 <- n2 <- 9
s1 <- 1.5
s3 <- 1.8
sp <- ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2)
s2 <- 1.8
sp <- ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2)
sp
?pt
?t.test
1100 + c(1,-1)*qt(0.95, 8)*30^2/9
1100 + c(1,-1)*qt(0.95, 8)*30/3
1100 + c(1,-1)*qt(0.95, 8)*30^2/3
1100 + c(1,-1)*qt(0.95, 8)*(30^2/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)*(30^2/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)*(30/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)
1100 + c(1,-1)*qt(0.975, 8)*(30^2/9/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)*(30^2/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)*(30/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)*(30^2/sqrt(9))
1100 + c(1,-1)*qt(0.975, 8)*(30/sqrt(9))
qt(0.95, 8)
-2 + c(1,-1)*qt(0.975,8)*(2.6/sqrt(9))
-2 + c(1,-1)*qt(0.95,8)*(2.6/sqrt(9))
-2 + c(1,-1)*qt(0.95,8)*(2.1/sqrt(9))
-2 + c(1,-1)*qt(0.95,8)*(1.5/sqrt(9))
-2 + c(1,-1)*qt(0.95,8)*(0.3/sqrt(9))
t.test(3,5,pairs=TRUE,var.equal=FALSE)
t.test(3,5,pairs=TRUE,var.equal=FALSE,conf.level=0.95)
> n1 <- n2 <- 9
> s1 <- 1.5
> s3 <- 1.8
> sp <- ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2)
n1 <- n2 <- 10
s1 <- 0.6
s2 <- 0.68
semd <- sp*sqrt(1/n1 + 1/n2)
semd
md <- 3-5
md + c(1,-1)*qt(0.975, n1 + n2 -2)*semd
md + c(1,-1)*qt(0.95, n1 + n2 -2)*semd
sp
sp <- ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2)
sp
md + c(1,-1)*qt(0.975, n1 + n2 -2)*semd
md + c(1,-1)*qt(0.95, n1 + n2 -2)*semd
sp
s1
s2
md
semd <- sp*sqrt(1/n1 + 1/n2)
semd
md + c(1,-1)*qt(0.95, n1 + n2 -2)*semd
sp
semd
md
md + c(1,-1)*qt(0.975, n1 + n2 -2)*semd
n2
n1
md + c(1,-1)*qt(0.975, 10)*semd
md + c(1,-1)*qt(0.975, 20)*semd
md + c(1,-1)*qt(0.975, 18)*semd
md + c(1,-1)*qt(0.95, 18)*semd
md + c(1,-1)*qt(0.95, 10)*semd
sp <- sqrt( ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2) )
semd <- sp*sqrt(1/n1 + 1/n2)
semd
md + c(1,-1)*qt(0.95, n1+n2 -2)*semd
md + c(1,-1)*qt(0.975, n1 + n2 - 2)*semd
md + c(1,-1)*qt(0.95, n1 + n2 - 2)*semd
sp
md + c(1,-1)*qt(0.95, n1 + n2)*semd
md + c(1,-1)*qt(0.95, n1)*semd
md + c(1,-1)*qt(0.90, n1 + n2 - 2 )*semd
md + c(1,-1)*qt(0.95, n1 + n2 - 2 )
n1 <- n2 <- 100
s1 <- 0.5
s2 <- 2
md <- 4 - 6
sp <- sqrt( ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2) )
semd <- sp*sqrt(1/n1 + 1/n2)
md + c(1,-1)*qt(0.95, n1 + n2 - 2 )*semd
2 + c(1,-1)*qt(0.95, n1 + n2 - 2 )*semd
n1 <- n2 <- 9
s1 <- 1.5
s2 <- 1.8
md <- -3 - 1
sp <- sqrt( ( ( n1 - 1) * s1^2 + (n2-1) * s2^2)/ (n1 + n2 -2) )
semd <- sp*sqrt(1/n1 + 1/n2)
md + c(1,-1)*qt(0.90, n1 + n2 - 2 )*semd
pt(0.95, 6)
?ptest
?pt
pt(0.95, 6, lower.tail=F)
qt(0.95, 6, lower.tail=F)
qt(0.95, 6, lower.tail=T)
qt(0.05, 6, lower.tail=T)
pt(0.05, 6, lower.tail=T)
pt(0.05, 6, lower.tail=T)
pt(0.05, 6, lower.tail=T)
?t.test
pt(0.95, 6)
pt(0.95, 6)*2
x <- c(1.5,2.9,0.9,3.9,3.2,2.1,1.9)
x
t.test(x, 2.34, conf.level=0.95)
t.test(x, x, 2.34, conf.level=0.95)
dim(x)
nrows(x)
nrow(x)
?pt
pt(0.95, 6)*2
pt(0.95, 6)*2.47
pt(0.95, 6)*2.447
.96*2
c(-1,1)*qt(0.95, 6)*0.39/sqrt(7)
c(-1,1)*qt(0.95, 6)*(0.39/sqrt(7))
c(-1,1)*qt(0.95, 6)*0.39
2.34 + c(-1,1)*qt(0.95, 6)*0.39
2.34 + c(-1,1)*qt(0.95, 6)*(0.39/sqrt(7))
2.34 + c(-1,1)*qt(0.95, 6)*(0.39/sqrt(6))
2.34 + c(-1,1)*qt(0.95, 6)*(0.39)
1.04/sqrt(7)
2.34 + c(-1,1)*qt(0.95, 6)*(0.3930831)
2.34 + c(-1,1)*qt(0.95, 6, lower.tail=F)*(0.3930831)
2.34 + c(-1,1)*qt(0.95, 6, lower.tail=T)*(0.3930831)
raw <- readLines("CRUTEM4.txt")
myStateSettings <-'
{"xZoomedDataMin":1199145600000,"colorOption":"2",
"duration":{"timeUnit":"Y","multiplier":1},"yLambda":1,
"yAxisOption":"4","sizeOption":"_UNISIZE",
"iconKeySettings":[],"xLambda":1,"nonSelectedAlpha":0,
"xZoomedDataMax":1262304000000,"iconType":"LINE",
"dimensions":{"iconDimensions":["dim0"]},
"showTrails":false,"uniColorForNonSelected":false,
"xAxisOption":"_TIME","orderedByX":false,"playDuration":15000,
"xZoomedIn":false,"time":"2010","yZoomedDataMin":0,
"yZoomedIn":false,"orderedByY":false,"yZoomedDataMax":100}
'
world <- c(NoAm_country,SoAm_country,Eur_country,Asia_country,Africa_country,Oceana_country)
year1 <- 2060 ##make sure these are numeric
year2 <- 2079 ##make sure these are numeric
world_dat <- get_ensemble_temp(world,"annualavg", year1 , year2)
M <- gvisMotionChart(world_dat, "data", "year", options=list(state=myStateSettings))
plot(M)
library(rWBclimate)
library(googleVis)
myStateSettings <-'
{"xZoomedDataMin":1199145600000,"colorOption":"2",
"duration":{"timeUnit":"Y","multiplier":1},"yLambda":1,
"yAxisOption":"4","sizeOption":"_UNISIZE",
"iconKeySettings":[],"xLambda":1,"nonSelectedAlpha":0,
"xZoomedDataMax":1262304000000,"iconType":"LINE",
"dimensions":{"iconDimensions":["dim0"]},
"showTrails":false,"uniColorForNonSelected":false,
"xAxisOption":"_TIME","orderedByX":false,"playDuration":15000,
"xZoomedIn":false,"time":"2010","yZoomedDataMin":0,
"yZoomedIn":false,"orderedByY":false,"yZoomedDataMax":100}
'
world <- c(NoAm_country,SoAm_country,Eur_country,Asia_country,Africa_country,Oceana_country)
year1 <- 2060 ##make sure these are numeric
year2 <- 2079 ##make sure these are numeric
world_dat <- get_ensemble_temp(world,"annualavg", year1 , year2)
M <- gvisMotionChart(world_dat, "data", "year", options=list(state=myStateSettings))
plot(M)
library(SDSFoundations)
install.packages("SDSFoundations")
BikeData <- read.csv("C:\\Users\\mcelest\\AppData\\Local\\Temp\\1\\RtmpkjrL5E\\data2864216a3e48")
View(BikeData)
BikeData[7, "age"]
BikeData[1:10, BikeData$cyc_freq=="Daily"]
BikeData[1:10, "cyc_freq"]
table(BikeData[1:10, "cyc_freq"])
BikeData$speed[BikeData$gender=F]
BikeData$speed[BikeData$gender==F]
BikeData[-1,BikeData$gender==F]
BikeData[1,BikeData$gender==F]
BikeData[BikeData$gender==F,]
BikeData[BikeData$gender=="F",]
BikeData$speed[BikeData$gender=="F",]
BikeData$speed[BikeData$gender=="F"]
BikeData$speed[BikeData$gender=="F" & BikeData$cyc_freq == "Less than once a month"]
table(BikeData$student)
student <- BikeData[BikeData$student == 1,]
str(student)
table(student$cyc_freq)
distance <-student$distance
distance
str(distance)
mean(distance)
read?
?read
?read.csv
oil <- readClipboard()
str(oil)
oil <- readClipboard()
str(oil)
view(oil)
View(oil)
oil <- readClipboard()
view(oil)
View(oil)
oil <- readClipboard()
View(oil)
sd(oil)
oil - 500
oil[1] - 500
oil$x <- numeric(oil$x)
oil <- numeric(oil)
oil[] <- numeric(oil[])
oil$V1 <- numeric(oil$V1)
oil <- as.numeric(oil)
oil - 500
500 - oil
550 - oil
550 - (550 - oil)
550 - oil
500 - oil
?pie
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
names(pie.sales) <- c("Blueberry", "Cherry",
"Apple", "Boston Cream", "Other", "Vanilla Cream")
pie(pie.sales) # default colours
pie(pie.sales, col = c("purple", "violetred1", "green3",
"cornsilk", "cyan", "white"))
text(0, 1, "init.angle = 90", col = "red")
pie(pie.sales, density = 10, angle = 15 + 10 * 1:6)
segments(0, 0, 0, 1, col = "red", lwd = 2)
n <- 200
pie(rep(1, n), labels = "", col = rainbow(n), border = NA,
main = "pie(*, labels=\"\", col=rainbow(n), border=NA,..")
pie(pie.sales) # default colours
`Generate-Institution-Portfolio` <- read.table("C:\\Users\\mcelest\\AppData\\Local\\Temp\\2\\RtmpeSFCLU\\data32d8245e675c", quote="\"")
View(`Generate-Institution-Portfolio`)
getClipboard()
?clipboard
read.Clipboard()
readClipboard()
?adftest
install.packages("tseries")
package(tseries)
library(tseries)
?adf.test
install.packages("quantmod")
?getSymbols
?getSymbols.oanda
library(quantmod)
?getSymbols.oanda
usd.cad <- getSymbols("USD/CAD", src="oanda", from="2007-07-22", to="2012-03-28")
usd.cad <- getSymbols("USD/CAD", src="oanda", from="2007-07-22", to="2008-03-28")
str(usd.cad)
usd.cad <- getSymbols.oanda("USD/CAD", from="2007-07-22", to="2008-03-28")
?getSymbols.oanda
getSymbols.oanda("USD/CAD", from="2007-07-22", to="2008-03-28")
getSymbols.oanda("USD/CAD", from="2007-07-22")
getSymbols.oanda("USD/CAD", usd.cad, from="2007-07-22", to="2008-03-28")
?quantmod
getSymbols.oanda("USD/CAD", from="2007-07-22", to="2008-03-28", auto.assign=getOption('getSymbols.auto.assign', TRUE))
?environment
e1 <- new.env(parent=baseenv())
getSymbols.oanda("USD/CAD", e1, from="2007-07-22", to="2008-03-28", auto.assign=getOption('getSymbols.auto.assign', TRUE))
str(usd.cad)
usd.cad <- getSymbols.oanda("USD/CAD", e1, from="2007-07-22", to="2008-03-28", auto.assign=getOption('getSymbols.auto.assign', TRUE))
usd.cad <- getSymbols.oanda("USD/CAD", e1, from="2007-07-22", to="2008-03-28", auto.assign=getOption('getSymbols.auto.assign', TRUE))
?getSymbols.oanda
usd.cad <- getSymbols.oanda("USD/CAD", e1, from="2007-07-22", to="2008-03-28", auto.assign=getOption('getSymbols.auto.assign', TRUE), return.class="dataframe")
plot(USDCAD$Data)
summary(USDCAD$Data)
usd.cad <- getSymbols.oanda("USD/CAD", e1, from="2007-07-22", to="2008-03-28", auto.assign=getOption('getSymbols.auto.assign', TRUE))
candleChart(USDCAD)
summary(USDCAD[1])
summary(USDCAD[2])
summary(USDCAD[,2])
str(USDCAD)
usdcad <- data.frame(date = index(USDCAD), USDCAD, row.names=NULL)
adf.test(usdcad$USD.CAD)
Sys.getenv("JAVA_HOME")
library(caret)
setwd("~/GitHub/PracticalMachineLearning-Project")
train_data <- read.csv( "pml-training.csv" )
test_data <- read.csv( "pml-testing.csv" )
inTrain <- createDataPartition( train_data$classe, p=0.75, list=FALSE )
training <- train_data[ inTrain, ]
testing <- train_data[ -inTrain, ]
### LOAD AS FACTORS; CONVERT NA to 0s;
trainx <- training
trainx [is.na(trainx)] <- 0
min(trainx)
summary( trainx)
table( max_yaw_forearm )
table( trainx$max_yaw_forearm )
table( training$max_yaw_forearm )
table( train_data$max_yaw_forearm)
summary ( train_data )
summary ( test_data )
summary ( train_data )
removeCols <- c("amplitude_yaw_forearm","min_yaw_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_yaw_forearm","skewness_roll_forearm","skewness_yaw_forearm","skewness_pitch_forearm","amplitude_yaw_dumbbell","skewness_roll_dumbbell","skewness_yaw_dumbbell","kurtosis_yaw_dumbbell","kurtosis_roll_arm","kurtosis_picth_arm","kurtosis_yaw_arm","skewness_roll_arm","amplitude_yaw_belt","skewness_yaw_belt","skewness_roll_belt","skewness_roll_belt.1","kurtosis_yaw_belt","kurtosis_picth_belt","kurtosis_roll_belt")
trainx <- trainX[,-removeCols]
trainx <- trainx[,-removeCols]
trainx <- trainx[-removeCols]
trainx <- trainx[,-removeCols]
summary(trainx[removeCols])
trainx <- trainx[!removeCols]
trainx <- trainx[,!removeCols]
trainy <- trainx[removeCols]
trainx <- trainx[-(removeCols)]
trainx <- trainx[-names(trainx[removeCols]]
trainx <- trainx[-names(trainx)[removeCols]]
?minus
table(inTrain)
trainx <- trainx[-trainy]
trainx <- trainx[,-trainy]
trainx <- trainx[,-trainy[,]]
trainx[,removeCols] <- NULL
length(removeCols)
removeCols <- unique(removeCols)
length(removeCols)
trainx[,removeCols] <- NULL
trainx[removeCols] <- NULL
trainx <- trainx[-names(trainy)]
trainx <- trainx[,-names(trainy)]
trainx <- trainx[,-c(names(trainy))]
trainx <- trainx[,-removeCols[1]]
trainx <- trainx[-trainy[removeCols]]
trainx [ , removeCols[1] ] <- NULL
trainx [ , removeCols ] <- NULL
trainx [ , removeCols[2] ] <- NULL
trainx [ , removeCols[3] ] <- NULL
for (i in 1:21) { trainx [ , removeCols[i] ] <- NULL }
summary(trainx)
removeCols
removeCols [23] <- "kurtosis_yaw_forearm"
removeCols [24] <- "kurtosis_picth_forearm"
removeCols [25] <- "kurtosis_roll_dumbbell"
trainx [ , removeCols[23] ] <- NULL
trainx [ , removeCols[24] ] <- NULL
trainx [ , removeCols[25] ] <- NULL
savehistory("~/GitHub/PracticalMachineLearning-Project/2015_01_23.Rhistory")
summary(trainx)
trainx <- trainx[, -(1:7)]
M <- abs( cor( trainx[, -129] ))
trainx <- trainx[, -kurtosis_roll_forearm]
trainx <- trainx[, -"kurtosis_roll_forearm"]
trainx <- trainx[, -("kurtosis_roll_forearm")]
removeCols[26] <- "kurtosis_roll_forearm"
trainx [ , removeCols[26] ] <- NULL
M <- abs( cor( trainx[, -128] ))
summary(trainx)
table( trainx$kurtosis_picth_dumbbell )
summary(trainx)
removeCols[27] <- "skewness_yaw_arm"
trainx [ , removeCols[27] ] <- NULL
M <- abs( cor( trainx[, -127] ))
summary(trainx)
table( max_yaw_belt )
table( trainx$max_yaw_belt )
trainx <- trainx [, -7]
trainx$skewness_pitch_arm <- NULL
trainx$max_yaw_dumbbell <- NULL; trainx$min_yaw_dumbbell <- NULL
trainx$min_yaw_belt <- NULL
removeCols
trainx$kurtosis_picth_dumbell <- NULL; trainx$skewness_pitch_dumbbell <- NULL
trainx$kurtosis_picth_dumbbell <-NULL
savehistory("~/GitHub/PracticalMachineLearning-Project/2015_01_23.Rhistory")
